import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { fakeCourses } from '../data/fakeCourses';
import { commentByLabel } from '../data/commentByLabel';
import CommentPieChart from '../components/CommentPieChart';
import ScoreDistributionPlot from '../components/ScoreDistributionPlot';
import CourseStudentLineChart from '../components/CourseStudentLineChart';
import './css/CourseDetail.css';

// H√†m gi·∫£ l·∫≠p d·ªØ li·ªáu cho demo (sau n√†y thay b·∫±ng API call)
function getFakeCourseDetail(courseId) {
  const course = fakeCourses.find(c => c.course_id === courseId) || fakeCourses[0];
  const star = Math.floor(Math.random() * 5) + 1;
  // Sinh d·ªØ li·ªáu s·ªë l∆∞·ª£ng h·ªçc vi√™n theo th·ªùi gian (10 tu·∫ßn)
  const weeks = [
    '03/03', '10/03', '17/03', '24/03', '31/03',
    '07/04', '14/04', '21/04', '28/04', '05/05'
  ];
  const base = Math.floor(Math.random() * 500) + 100; // 100-600 h·ªçc vi√™n
  const studentTimeSeries = weeks.map((week, i) => ({
    week,
    students: base + Math.floor(Math.random() * 30) + i * 5 // tƒÉng nh·∫π theo tu·∫ßn
  }));
  return {
    ...course,
    name: course.name || `Kh√≥a h·ªçc ${courseId}`,
    star,
    about: course.about || 'Kh√≥a h·ªçc cung c·∫•p ki·∫øn th·ª©c n·ªÅn t·∫£ng v·ªÅ khoa h·ªçc d·ªØ li·ªáu, gi√∫p sinh vi√™n hi·ªÉu v√† ·ª©ng d·ª•ng c√°c ph∆∞∆°ng ph√°p ph√¢n t√≠ch d·ªØ li·ªáu hi·ªán ƒë·∫°i.',
    field: course.field || 'Khoa h·ªçc m√°y t√≠nh',
    comments: [
      { user: 'Nguy·ªÖn VƒÉn A', text: 'Kh√≥a h·ªçc r·∫•t hay!', sentiment: 'T√≠ch c·ª±c' },
      { user: 'Tr·∫ßn Th·ªã B', text: 'B√¨nh th∆∞·ªùng.', sentiment: 'Trung l·∫≠p' },
      { user: 'L√™ VƒÉn C', text: 'Kh√≥ hi·ªÉu qu√°.', sentiment: 'Ti√™u c·ª±c' }
    ],
    students: [
      { name: 'Nguy·ªÖn VƒÉn A', history: [7.5, 8.0, 9.0] },
      { name: 'Tr·∫ßn Th·ªã B', history: [6.0, 7.0, 7.5] }
    ],
    teachers: course.teachers,
    studentTimeSeries
  };
}

export default function CourseDetail() {
  const location = useLocation();
  const navigate = useNavigate();
  const params = new URLSearchParams(location.search);
  const courseId = params.get('id');

  const [course, setCourse] = useState(null);

  useEffect(() => {
    if (courseId) {
      // Sau n√†y thay b·∫±ng API call l·∫•y d·ªØ li·ªáu t·ª´ backend
      const data = getFakeCourseDetail(courseId);
      setCourse(data);
    }
  }, [courseId]);

  // N·∫øu c√≥ id, hi·ªÉn th·ªã chi ti·∫øt
  if (courseId) {
    if (!course) return <div>Loading...</div>;
    const commentPieData = commentByLabel[course.star] || commentByLabel[1];
    return (
      <main className="course-detail-main">
        <div className="course-detail-container">
          <button
            onClick={() => navigate(-1)}
            className="course-detail-back-btn"
          >
            <span className="course-detail-back-icon">‚Üê</span> Quay l·∫°i danh s√°ch
          </button>

          <div className="course-detail-card">
            <div className="course-detail-header">
              <h2 className="course-detail-title">{course.name}</h2>
            </div>

            <div className="course-detail-row">
              <span className="course-detail-row-icon">#Ô∏è‚É£</span>
              <span className="course-detail-row-label">M√£ kh√≥a h·ªçc:</span>
              <span className="course-detail-row-value">{course.course_id}</span>
            </div>
            <div className="course-detail-row course-detail-about">
              <span className="course-detail-row-icon">‚ÑπÔ∏è</span>
              <span className="course-detail-row-label">About:</span>
              <span className="course-detail-about-text">{course.about ? course.about : <span style={{color:'#aaa'}}>Ch∆∞a c·∫≠p nh·∫≠t</span>}</span>
            </div>
            <div className="course-detail-row">
              <span className="course-detail-row-icon">üè∑Ô∏è</span>
              <span className="course-detail-row-label">Field:</span>
              <span>{course.field ? course.field : <span style={{color:'#aaa'}}>Ch∆∞a c·∫≠p nh·∫≠t</span>}</span>
            </div>
            <div className="course-detail-row">
              <span className="course-detail-row-icon">üì∫</span>
              <span className="course-detail-row-label">S·ªë video:</span>
              <span>{course.sl_vid || course.videos || 0}</span>
            </div>
          </div>

          {/* T·ªâ l·ªá comment (bi·ªÉu ƒë·ªì tr√≤n) */}
          <section className="course-detail-section">
            <h3 className="course-detail-section-title">T·ªâ l·ªá c·∫£m x√∫c b√¨nh lu·∫≠n (Label {course.star} sao)</h3>
            <CommentPieChart data={commentPieData} title={`T·ªâ l·ªá c·∫£m x√∫c b√¨nh lu·∫≠n (${course.star} sao)`} />
          </section>

          {/* Danh s√°ch comment */}
          <section className="course-detail-section">
            <h3 className="course-detail-section-title">Danh s√°ch b√¨nh lu·∫≠n</h3>
            <div className="course-detail-comment-list">
              {course.comments.map((c, idx) => {
                let colorClass = 'comment-positive';
                if (c.sentiment === 'Trung l·∫≠p') colorClass = 'comment-neutral';
                if (c.sentiment === 'Ti√™u c·ª±c') colorClass = 'comment-negative';
                return (
                  <div key={idx} className={`course-detail-comment-card ${colorClass}`}>
                    <div className="comment-user">{c.user}</div>
                    <div className="comment-text">{c.text}</div>
                    <div className={`comment-sentiment ${colorClass}`}>{c.sentiment}</div>
                  </div>
                );
              })}
            </div>
          </section>

          {/* Danh s√°ch h·ªçc sinh */}
          <section className="course-detail-section">
            <h3 className="course-detail-section-title">Danh s√°ch h·ªçc sinh & l·ªãch s·ª≠ h·ªçc t·∫≠p</h3>
            {course.students && course.students.length > 0 ? (
              <div className="course-detail-table-wrap">
                <table className="course-detail-table">
                  <thead>
                    <tr>
                      <th>T√™n h·ªçc sinh</th>
                      <th>L·ªãch s·ª≠ ƒëi·ªÉm c√°c kh√≥a tr∆∞·ªõc</th>
                    </tr>
                  </thead>
                  <tbody>
                    {course.students.map((s, idx) => (
                      <tr key={idx} className="course-detail-table-row">
                        <td>{s.name}</td>
                        <td className="course-detail-score">{s.history.join(' ; ')}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <p>Kh√¥ng c√≥ d·ªØ li·ªáu h·ªçc sinh.</p>
            )}
          </section>

          {/* Danh s√°ch gi·∫£ng vi√™n */}
          <section className="course-detail-section">
            <h3 className="course-detail-section-title">Danh s√°ch gi·∫£ng vi√™n & ƒëi·ªÉm trung b√¨nh</h3>
            <div className="course-detail-table-wrap">
              <table className="course-detail-table">
                <thead>
                  <tr>
                    <th>T√™n gi·∫£ng vi√™n</th>
                    <th>ƒêi·ªÉm trung b√¨nh</th>
                  </tr>
                </thead>
                <tbody>
                  {course.teachers.map((t, idx) => (
                    <tr key={idx} className="course-detail-table-row">
                      <td>{t.name}</td>
                      <td className="course-detail-score">{t.avg_score}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </section>

          {/* Bi·ªÉu ƒë·ªì ph√¢n b·ªë ƒëi·ªÉm c√°c problem */}
          <section className="course-detail-section">
            <h3 className="course-detail-section-title">Ph√¢n b·ªë ƒëi·ªÉm c√°c b√†i t·∫≠p</h3>
            <ScoreDistributionPlot courses={[course]} />
          </section>

          {/* Bi·ªÉu ƒë·ªì s·ªë l∆∞·ª£ng h·ªçc vi√™n theo th·ªùi gian */}
          <section className="course-detail-section">
            <CourseStudentLineChart data={course.studentTimeSeries} title="Ph√¢n b·ªë s·ªë l∆∞·ª£ng h·ªçc vi√™n theo th·ªùi gian" />
          </section>
        </div>
      </main>
    );
  }

  // N·∫øu kh√¥ng c√≥ id, hi·ªÉn th·ªã danh s√°ch
  return (
    <main className="content">
      <h2>Danh s√°ch kh√≥a h·ªçc</h2>
      <div style={{ display: 'flex', flexWrap: 'wrap', gap: 24 }}>
        {fakeCourses.slice(0, 8).map(course => {
          const school = course.school || course.school_name || 'Tr∆∞·ªùng ƒê·∫°i h·ªçc Demo';
          const star = course.star || Math.floor(Math.random() * 5) + 1;
          return (
            <div
              key={course.course_id}
              style={{
                border: '1px solid #eee',
                borderRadius: 8,
                padding: 16,
                width: 300,
                boxShadow: '0 2px 8px #eee',
                cursor: 'pointer'
              }}
              onClick={() => navigate(`/detail?id=${course.course_id}`)}
            >
              <h3>{course.name}</h3>
              <p><b>School:</b> {school}</p>
              <p><b>S·ªë b√†i t·∫≠p:</b> {course.problem_scores?.length || 0}</p>
              <p><b>S·ªë video:</b> {course.sl_vid || course.videos || 0}</p>
              <p><b>S·ªë sao:</b> {star} <span style={{color:'#FFD700', fontSize:'1.1em', marginLeft:4}}>‚≠ê</span></p>
            </div>
          );
        })}
      </div>
    </main>
  );
}